# Configuration file for nanopub server
#
# These configurations can be overridden by the content of a file called
# 'local.conf.properties' (not under version control).

# Enter here the public URL to access this nanopub server:
#public-url=http://example.org/nanopub-server/
public.url=

# Enter here the name and email address of the server admin (this will be
# public):
#admin=Tobias Kuhn <kuhntobias@gmail.com>
admin=

# Connection to MongoDB:
mongodb.host=localhost
mongodb.port=27017
mongodb.dbname=nanopub-server
# Important: each nanopub server needs its own DB. The DB cannot be shared!
# (But a MongoDB instance can be shared!)
# If credentials are needed to get write access to the database:
#mongodb.username=
#mongodb.password=

# Enabling this means that everybody can upload new nanopubs:
post.nanopubs.enabled=false

# Enabling this means that everybody can register new peers:
post.peers.enabled=false

# Enabling this means that other peers are contacted:
peer.scan.enabled=false

# Enabling this means that nanopubs found at peers are fetched and stored:
# WARNING: It will download ALL nanopubs it can find! (unless patterns are set
# below)
collect.nanopubs.enabled=false

# URI/hash patterns define which nanopublications this server is interested in
# based only on their URIs. The URI pattern defines the sequence of characters
# with which the URI has to start. For example, a server with the URI pattern
#uri.pattern=http://np.inn.ac/ http://vu.nl/
# will only store nanopublications whose URIs start with either
# "http://np.inn.ac/" or "http://vu.nl/". All other nanopublications will be
# ignored.
uri.pattern=
# Similarly, the hash pattern defines the characters with which the hash part
# of the trusty URI has to start. For example,
#hash.pattern=A B C D E F G H I J K L M N O P
# defines that only nanopublications with hashes that start with A-P are
# stored (thereby storing on average one fourth of all nanopublications).
hash.pattern=
# An empty URI/hash pattern matches all nanopublications. If both patterns are
# set, a nanopublication has to comply with *both* of them in order to be
# stored by the given server. (URI/hash patterns can only be set when a new
# journal is created; otherwise these values are ignored.)

# Enabling this means that a nanopublication is checked against its trusty
# URI before returned to a GET request.
check.nanopubs.on.get=false

# Setting this parameter makes the server reject nanopublications that contain
# more than the specified number of triples.
max.nanopub.triples=1200

# Setting this parameter makes the server reject nanopublications that contain
# more than the specified number of bytes (summing up the byte lengths of all
# URIs and literals of all quads).
max.nanopub.bytes=1000000

# Set this parameter to restrict the number of nanopublications this server
# will accept. Once this number is reached, the server is considered "full" and
# no further nanopublications are loaded (neither by POST nor from other
# servers).
max.nanopubs=

# Server waits specified number of milliseconds after it has been triggered to
# scan its peers for synchronizing with them. The smaller the value the more
# frequently peers are checked for updates.
wait.ms.before.peer.scan=60000

# The page size of the journal (only has an effect when new journal is created):
init.page.size=1000

# Initial peers (separated by blank spaces):
initial.peers=

# If set to 'true', the URIs of all nanopubs are logged when loaded:
log.nanopub.loading=false

# If set, the given directory is checked regularly and the contained nanopub
# files are loaded into the database. The webapp process needs read and write
# permission. A subdirectory 'processing' is created for files being processed
# and another subdirectory 'done' for finished files.
load.dir=

# Is automatically set by Maven:
version=${pom.version}
build.date=${timestamp}

# Set a URL here to be notified about new nanopubs via HTTP Post
post.new.nanopubs.to=
